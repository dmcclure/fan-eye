<?php

namespace Demo\FanEyeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * TvSeriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TvSeriesRepository extends EntityRepository
{
    /**
     * Select two TV series from the DB at random, not including any the user has seen previously.
     * @param array $idsToExclude IDs of TV series to not include in the results
     */
    public function findVoteCandidates(array $idsToExclude = [-1]) {
        // We need to use native SQL for this because Doctrine doesn't support selecting random rows
        // (see http://www.doctrine-project.org/jira/browse/DDC-950)
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('DemoFanEyeBundle:TvSeries', 's');
        $rsm->addFieldResult('s', 'id', 'id');
        $rsm->addFieldResult('s', 'name', 'name');
        $rsm->addFieldResult('s', 'description', 'description');
        $rsm->addFieldResult('s', 'year', 'year');
        $rsm->addFieldResult('s', 'image', 'image');

        // If our table becomes very large we may not want to use "ORDER BY RAND()" to select random rows but for now it's fine
        $sql = 'SELECT id, name, description, year, image FROM tv_series WHERE id NOT IN (:idsToExclude) ORDER BY RAND() LIMIT 2';
        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm)->setParameter('idsToExclude', $idsToExclude);
        return $query->getArrayResult();
    }

    /**
     * Return the top 5 TV series by percentage of winning votes.
     * @return array The top 5 TV series by percentage of winning votes
     */
    public function findTop5() {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('DemoFanEyeBundle:TvSeries', 's');
        $rsm->addFieldResult('s', 'winner_id', 'id');
        $rsm->addFieldResult('s', 'name', 'name');
        $rsm->addFieldResult('s', 'description', 'description');
        $rsm->addFieldResult('s', 'year', 'year');
        $rsm->addFieldResult('s', 'image', 'image');
        $rsm->addMetaResult('s', 'pct', 'percentageWon');

        $sql = 'SELECT
                  v.winner_id, s.name, s.description, s.year, s.image,
                  ROUND(COUNT(*) / (SELECT COUNT(*) FROM vote WHERE winner_id=v.winner_id OR loser_id=v.winner_id) * 100) pct
                FROM vote v, tv_series s
                WHERE v.winner_id=s.id GROUP BY winner_id, name, description, year, image ORDER BY pct DESC LIMIT 5';
        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        return $query->getArrayResult();
    }
}
